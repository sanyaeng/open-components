package com.wadpam.open.tag.dao;

import java.util.Collection;
import java.util.Date;

import net.sf.mardao.core.Filter;
import net.sf.mardao.core.dao.DaoImpl;

import com.wadpam.open.tag.domain.DTag;

/**
 * Implementation of Business Methods related to entity DTag. This (empty) class is generated by mardao, but edited by developers.
 * It is not overwritten by the generator once it exists.
 * 
 * Generated on 2013-03-01T11:56:39.376+0700.
 * 
 * @author mardao DAO generator (net.sf.mardao.plugin.ProcessDomainMojo)
 */
public class DTagDaoBean extends GeneratedDTagDaoImpl implements DTagDao {

    public DTagDaoBean() {
        this.memCacheAll = true;
      //  this.memCacheEntities = true;
    }

    public boolean isRecordedModified(Date updatedDate) {
        final Filter filter = createGreaterThanOrEqualFilter(COLUMN_NAME_UPDATEDDATE, updatedDate);
        return queryIterableKeys(0, 1, null, null, COLUMN_NAME_UPDATEDDATE, false, null, false, filter).iterator().hasNext();

    }
    @Override
    public Iterable<DTag> queryAll() {
        Iterable<DTag> returnValue = null;
        // try cache first
        if (memCacheAll) {
           returnValue = (Collection<DTag>) getMemCache().get(createMemCacheKeyAll());
        }
        // if no cache or missing, query
        if (null == returnValue) {
            returnValue = super.queryIterable(false, 0, -1, null, null, COLUMN_NAME_NAME, true, null, false, null);
            // populate memCache, and get the Collection
            if (memCacheAll) {
                returnValue = updateMemCacheAll(returnValue);
                LOG.debug("Queried {} entities for {}.queryAll()", ((Collection)returnValue).size(), getTableName());
            }
            else {
                LOG.debug("Queried entities for {}.queryAll()", getTableName());
            }
        }
        else {
            LOG.debug("Fetched {} entities from memCache {}.queryAll()", ((Collection)returnValue).size(), getTableName());
        }
        return returnValue;
    }
}
